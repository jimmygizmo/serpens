Root does not pick up the environment like regular users and so the normal Pyenv installation
process is hitting a very small snag at the end when it is needed to 'source' the .profile
script of the user to pick up and run a few small lines added there.
This is to 'init' Pyenv.

As the root user in the Docker context, this is the error we hit when trying"
source ~/.bashrc

I have tried using .bashrc. Same results as using .profile. (root has both by default on this Ubuntu)
root@e4ac5b75f1fa:/# ls -alt /root/
total 24
drwxr-xr-x 1 root root 4096 May 21 19:16 .pyenv
drwxr-xr-x 1 root root 4096 May 21 19:16 ..
-rw-r--r-- 1 root root 3248 May 21 13:54 .bashrc
drwx------ 1 root root 4096 May 21 13:29 .
-rw-r--r-- 1 root root  161 Dec  5  2019 .profile

And notice we installed Pyenv into ~/.pyenv which is standard although it is usally for a normal
user, not root in a container.

Making the additions and the sourcing either gave the same error.

su -l did not work for picking up the changes either.

Next trying direct execution of the command within the conditional, but not sure this will work.
If it does work initially, then I'm not sure it will work for all possible scenarios within
then container, if for instance a new shell was spawned. But it is worth a try.

Trying manual execution to init Pyenv like this:
eval "$(pyenv init -)"
======================================================================
UPDATE: Actually, when using .bashrc, a NEW SHELL DOES HAVE WORKING PYENV. EXTERNAL SHELL FROM DOCKER RUN.
The failure is during the build.
TODO: Validate this finding using .profile and see if it is same/different.

UPDATE: This DOES NOT WORK for .profile. A new external shell via Docker run -it /bin/bash does NOT
have working pyenv command.

Now that we have established this, lets do the above test, which is a little unrelated from those
files. Lets just see how far we get in the build shell for now.

=====================================================================

Another method to try:
root@ubuntu:~# exec "$SHELL"

* Required this format: exec "/bin/bash" .. got Perm Denied using the $SHELL var. Security thing prob.
BUT it did not error, but it did not work to get pyenv activate either.
:(

======================================================================
ALTERNATE strategy to consider. Use a dedicated user for Python. A very reasonbable concept.
https://gist.github.com/jprjr/7667947

AHA! One of the comment posts has a version for root! We can try this first.

FROM debian:buster-slim

RUN apt-get update
RUN apt-get install -y --no-install-recommends make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev
RUN apt-get install -y mecab-ipadic-utf8

ENV HOME="/root"

WORKDIR $HOME
RUN apt-get install -y git
RUN git clone --depth=1 https://github.com/pyenv/pyenv.git .pyenv

ENV PYENV_ROOT="$HOME/.pyenv"
ENV PATH="$PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH"
RUN pyenv install 3.8.6
RUN pyenv global 3.8.6

=================================================================================


